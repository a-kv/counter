{"version":3,"sources":["components/Settings/Settings.module.css","components/Display/Display.module.css","components/Buttons/Button/Button.module.css","components/Buttons/Buttons.module.css","components/Counter/Counter.module.css","components/Settings/DisplaySet/DisplaySet.module.css","components/Display/Display.jsx","components/Buttons/Button/Button.jsx","components/Buttons/Buttons.jsx","components/Counter/Counter.jsx","components/Settings/DisplaySet/DisplaySet.jsx","components/Settings/Settings.jsx","redusers/reduser.jsx","App.js","serviceWorker.js","store.jsx","index.js"],"names":["module","exports","Display","props","className","classes","displayCounter","styleCounter","value","Button","button","disabled","onClick","name","Buttons","buttons","disabledInc","disabledRes","reset","Counter","container","DisplaySet","display","type","styleInput","maxValue","onChange","onChangeMax","minValue","onChangeMin","Settings","style","counter","disabledSet","initialState","currentValue","stepCounter","setButtonDisabled","reducer","state","action","errorMin","newMinCounter","newCounter","error","App","inc","incCounter","resetCurrentValue","resetCounter","changeMaxValue","e","Number","currentTarget","changeMinValue","set","setValues","saveState","render","React","Component","ConnectedApp","connect","dispatch","incCounterAC","resetCounterAC","setValuesAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.024688f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings_container__2fd4y\",\"button\":\"Settings_button__1c1p6\",\"red\":\"Settings_red__5Vziw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayCounter\":\"Display_displayCounter__bg-nA\",\"red\":\"Display_red__1xWKh\",\"displayText\":\"Display_displayText__2RQYO\",\"displayError\":\"Display_displayError__3j2Eo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2CMdu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__3aJE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__23FHh\",\"red\":\"Counter_red__2Kwkb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplaySet_display__tAkqG\"};","import React from 'react';\r\nimport classes from \"./Display.module.css\";\r\n\r\nconst Display = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className={classes.displayCounter}>\r\n            <span\r\n                className={props.styleCounter}>\r\n                {props.value}\r\n            </span>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Display;\r\n\r\n","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button className={classes.button} disabled={props.disabled} onClick={props.onClick}>{props.name}</button>\r\n    )\r\n}\r\nexport default Button;","import React from 'react';\r\nimport Button from \"./Button/Button\";\r\nimport classes from './Buttons.module.css';\r\n\r\n\r\nconst Buttons = (props) => {\r\n    return (\r\n        <div className={classes.buttons}>\r\n            <Button  disabled={props.disabledInc} name={'inc'} onClick={props.onClick}/>\r\n            <Button  disabled={props.disabledRes} name={'reset'} onClick={props.reset}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Buttons;","import React from 'react';\nimport Display from \"../Display/Display\";\nimport Buttons from \"../Buttons/Buttons\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = (props) => {\n\n    return (\n\n        <div className=\"Counter\">\n            <div className={classes.container}>\n\n                <Display\n                    styleCounter={props.styleCounter}\n                    value={props.value}\n                    // disabledSet={props.disabledSet}\n                />\n                <Buttons\n                    disabledInc={props.disabledInc}\n                    disabledRes={props.disabledRes}\n                    onClick={props.onClick}\n                    reset={props.reset}/>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Counter;\n","import React from 'react';\r\nimport classes from './DisplaySet.module.css';\r\n\r\nconst DisplaySet = (props) => {\r\n    return (\r\n        <div className={classes.display}>\r\n          max value:  <input type='number' className={props.styleInput} value={props.maxValue} onChange={props.onChangeMax}/>\r\n          start value: <input type='number' className={props.styleInput}value={props.minValue} onChange={props.onChangeMin}/>\r\n        </div>\r\n    )\r\n}\r\nexport default DisplaySet;","import React from 'react';\nimport classes from \"./Settings.module.css\";\nimport Button from \"../Buttons/Button/Button\";\nimport DisplaySet from \"./DisplaySet/DisplaySet\";\nimport PropTypes from 'prop-types';\n\n\nconst Settings = (props) => {\n\n    return (\n        <div className={classes.container}>\n\n            <DisplaySet\n                styleInput={props.styleInput}\n                onChangeMax={props.onChangeMax}\n                onChangeMin={props.onChangeMin}\n                // state={props.state}\n                maxValue={props.maxValue}\n                minValue={props.minValue}\n                style={classes.display}\n                value={props.counter}\n            />\n            <div className={classes.button}>\n                <Button disabled={props.disabledSet} name={'set'} onClick={props.onClick}/>\n            </div>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    counter: PropTypes.number\n\n};\n\nexport default Settings;\n","export const INC_COUNTER = 'INC_COUNTER';\r\nexport const RESET_COUNTER = 'RESET_COUNTER';\r\nexport const INIT_STATE = 'INIT_STATE';\r\nexport const CHANGE_MIN_VALUE = 'SET_MIN_VALUE';\r\nexport const CHANGE_MAX_VALUE = 'SET_MAX_VALUE';\r\nexport const SET_VALUES = 'SET_VALUES';\r\n\r\nlet initialState = {\r\n    currentValue: 0,\r\n    stepCounter: 1,\r\n    maxValue: 5,\r\n    minValue: 0,\r\n    setButtonDisabled: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INIT_STATE:\r\n            return {\r\n                ...action.initialState\r\n            }\r\n        case INC_COUNTER:\r\n            return {\r\n                ...state,\r\n                currentValue: action.currentValue,\r\n            }\r\n\r\n        case RESET_COUNTER:\r\n            return {\r\n                ...state,\r\n                currentValue: 0\r\n            }\r\n\r\n        case CHANGE_MIN_VALUE:\r\n            const errorMin = action.minValue < 0 || action.minValue >= state.maxValue;\r\n            const newMinCounter = action.minValue !== state.maxValue\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue,\r\n                currentValue: errorMin ? 'Incorrect value' :\r\n                              newMinCounter ?  'Enter value and press \\'set\\''  :state.currentValue,\r\n                setButtonDisabled: errorMin\r\n            }\r\n        case CHANGE_MAX_VALUE:\r\n            const newCounter = action.maxValue !== state.maxValue\r\n            const error = action.maxValue <= state.minValue || action.maxValue < 0\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                currentValue: error ? 'Incorrect value' :\r\n                              newCounter ?  'Enter value and press \\'set\\'' : state.currentValue,\r\n                setButtonDisabled: error\r\n            }\r\n\r\n        case SET_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValue: action.minValue,\r\n            }\r\n\r\n    }\r\n    return state\r\n}\r\n\r\nexport const incCounterAC = (currentValue) => {\r\n    return {type: INC_COUNTER, currentValue}\r\n}\r\nexport const resetCounterAC = (resetCurrentValue) => {\r\n    return {type: RESET_COUNTER, resetCurrentValue}\r\n}\r\nexport const changeMinValueAC = (minValue) => {\r\n    return {type: CHANGE_MIN_VALUE, minValue}\r\n}\r\nexport const changeMaxValueAC = (maxValue) => {\r\n    return {type: CHANGE_MAX_VALUE, maxValue}\r\n}\r\nexport const setValuesAC = (minValue) => {\r\n    return {type: SET_VALUES, minValue}\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport Counter from \"./components/Counter/Counter\";\nimport Settings from \"./components/Settings/Settings\";\nimport {connect} from \"react-redux\";\nimport {changeMaxValueAC, changeMinValueAC, incCounterAC, resetCounterAC, setValuesAC} from \"./redusers/reduser\";\n\nclass App extends React.Component {\n\n    // state = {\n    //     currentValue: 0,\n    //     stepCounter: 1,\n    //     maxValue: 5,\n    //     minValue: 0,\n    //     setButtonDisabled: false\n    // }\n\n    componentDidMount() {\n        // let str = localStorage.getItem('counter');\n        // let obj = JSON.parse(str)\n        // this.setState(obj)\n    }\n\n    inc = () => {\n        if (this.props.currentValue < this.props.maxValue) {\n            let counter = this.props.currentValue + this.props.stepCounter\n            this.props.incCounter(counter);\n        }\n    }\n\n    reset = () => {\n        let resetCurrentValue = this.props.currentValue;\n        this.props.resetCounter(resetCurrentValue);\n    }\n\n    changeMaxValue = (e) => {\n        let currentValue = Number(e.currentTarget.value);\n            this.props.changeMaxValue(currentValue);\n    }\n\n    changeMinValue = (e) => {\n        let currentValue = Number(e.currentTarget.value);\n            this.props.changeMinValue(currentValue)\n    }\n\n    set = () => {\n        let minValue = this.props.minValue\n        this.props.setValues(minValue)\n      }\n\n    saveState = () => {\n        // let ssd = JSON.stringify(this.props.state)\n        // localStorage.setItem('counter', ssd)\n    }\n\n\n    render = () => {\n        let disabledSet = this.props.maxValue === this.props.minValue || this.props.minValue < 0 || this.props.maxValue < 0 || this.props.minValue > this.props.maxValue;\n        let styleCounter = this.props.currentValue === this.props.maxValue || this.props.currentValue === 'Incorrect value' ? 'red' : '';\n        let styleInput = this.props.currentValue === 'Incorrect value' ? 'red-border' : ''; //ok\n        let disabledInc = this.props.currentValue === this.props.maxValue || this.props.currentValue === 'Incorrect value' || this.props.currentValue === 'Enter value and press \\'set\\'';\n        let disabledRes = this.props.currentValue === this.props.minValue || this.props.currentValue === 'Incorrect value' || this.props.currentValue === 'Enter value and press \\'set\\'';\n\n        return (\n\n            <div className=\"App\">\n                <div className='settings'>\n                    <Settings\n                        styleInput={styleInput}\n                        disabledSet={this.props.setButtonDisabled}\n                        onChangeMax={this.changeMaxValue}\n                        onChangeMin={this.changeMinValue}\n                        maxValue={this.props.maxValue}\n                        minValue={this.props.minValue}\n                        // state={this.props.state}\n                        onClick={this.set}\n\n                    />\n                </div>\n                <div className='counter'>\n                    <Counter\n                        styleCounter={styleCounter}\n                        value={this.props.currentValue} //??\n                        disabledInc={disabledInc}\n                        disabledRes={disabledRes}\n                        disabledSet={disabledSet}\n                        onClick={this.inc}\n                        reset={this.reset}/>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        currentValue: state.currentValue,\n        stepCounter: state.stepCounter,\n        maxValue: state.maxValue,\n        minValue: state.minValue,\n        setButtonDisabled: state.setButtonDisabled\n    }\n\n}\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        incCounter: (currentValue) =>{\n            dispatch(incCounterAC(currentValue))\n        },\n        resetCounter: (resetCurrentValue) => {\n            dispatch(resetCounterAC(resetCurrentValue))\n        },\n        changeMinValue: (currentValue) => {\n            dispatch(changeMinValueAC(currentValue))\n        },\n        changeMaxValue: (currentValue) => {\n            dispatch(changeMaxValueAC(currentValue))\n        },\n        setValues: (minValue) => {\n            dispatch(setValuesAC(minValue))\n        }\n    }\n\n}\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./redusers/reduser\";\r\n\r\nconst store = createStore(reducer)\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}