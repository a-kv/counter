{"version":3,"sources":["components/Settings/Settings.module.css","components/Display/Display.module.css","components/Buttons/Button/Button.module.css","components/Buttons/Buttons.module.css","components/Counter/Counter.module.css","components/Settings/DisplaySet/DisplaySet.module.css","components/Display/Display.jsx","components/Buttons/Button/Button.jsx","components/Buttons/Buttons.jsx","components/Counter/Counter.jsx","components/Settings/DisplaySet/DisplaySet.jsx","components/Settings/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","className","classes","displayCounter","styleCounter","value","Button","button","disabled","onClick","name","Buttons","buttons","disabledInc","disabledRes","reset","Counter","container","disabledSet","DisplaySet","display","type","styleInput","state","maxValue","onChange","onChangeMax","minValue","onChangeMin","Settings","style","counter","App","currentValue","stepCounter","inc","setState","Number","changeMaxValue","e","newValue","currentTarget","saveState","changeMinValue","newMinValue","set","ssd","JSON","stringify","localStorage","setItem","render","str","getItem","obj","parse","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4924872.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings_container__2fd4y\",\"button\":\"Settings_button__1c1p6\",\"red\":\"Settings_red__5Vziw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayCounter\":\"Display_displayCounter__bg-nA\",\"red\":\"Display_red__1xWKh\",\"displayText\":\"Display_displayText__2RQYO\",\"displayError\":\"Display_displayError__3j2Eo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2CMdu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__3aJE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__23FHh\",\"red\":\"Counter_red__2Kwkb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplaySet_display__tAkqG\"};","import React from 'react';\r\nimport classes from \"./Display.module.css\";\r\n\r\nconst Display = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className={classes.displayCounter}>\r\n            <span\r\n                className={props.styleCounter}>\r\n                {props.value}\r\n            </span>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Display;\r\n\r\n","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button className={classes.button} disabled={props.disabled} onClick={props.onClick}>{props.name}</button>\r\n    )\r\n}\r\nexport default Button;","import React from 'react';\r\nimport Button from \"./Button/Button\";\r\nimport classes from './Buttons.module.css';\r\n\r\n\r\nconst Buttons = (props) => {\r\n    return (\r\n        <div className={classes.buttons}>\r\n            <Button  disabled={props.disabledInc} name={'inc'} onClick={props.onClick}/>\r\n            <Button  disabled={props.disabledRes} name={'reset'} onClick={props.reset}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Buttons;","import React from 'react';\nimport Display from \"../Display/Display\";\nimport Buttons from \"../Buttons/Buttons\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = (props) => {\n\n    return (\n\n        <div className=\"Counter\">\n            <div className={classes.container}>\n\n                <Display\n                    styleCounter={props.styleCounter}\n                    value={props.value}\n                    disabledSet={props.disabledSet}\n                />\n                <Buttons\n                    disabledInc={props.disabledInc}\n                    disabledRes={props.disabledRes}\n                    onClick={props.onClick}\n                    reset={props.reset}/>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Counter;\n","import React from 'react';\r\nimport classes from './DisplaySet.module.css';\r\n\r\nconst DisplaySet = (props) => {\r\n    return (\r\n        <div className={classes.display}>\r\n          max value:  <input type='number' className={props.styleInput} value={props.state.maxValue} onChange={props.onChangeMax}/>\r\n          start value: <input type='number' className={props.styleInput}value={props.state.minValue} onChange={props.onChangeMin}/>\r\n        </div>\r\n    )\r\n}\r\nexport default DisplaySet;","import React from 'react';\nimport classes from \"./Settings.module.css\";\nimport Button from \"../Buttons/Button/Button\";\nimport DisplaySet from \"./DisplaySet/DisplaySet\";\nimport PropTypes from 'prop-types';\n\n\nconst Settings = (props) => {\n\n    return (\n        <div className={classes.container}>\n\n            <DisplaySet\n                styleInput={props.styleInput}\n                onChangeMax={props.onChangeMax}\n                onChangeMin={props.onChangeMin}\n                state={props.state}\n                style={classes.display}\n                value={props.counter}\n            />\n            <div className={classes.button}>\n                <Button disabled={props.disabledSet} name={'set'} onClick={props.onClick}/>\n            </div>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    counter: PropTypes.number\n\n};\n\nexport default Settings;\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./components/Counter/Counter\";\nimport Settings from \"./components/Settings/Settings\";\n\nclass App extends React.Component {\n\n    state = {\n        currentValue: 0,\n        stepCounter: 1,\n        maxValue: 5,\n        minValue: 0\n    }\n\n    componentDidMount() {\n        let str = localStorage.getItem('counter');\n        let obj = JSON.parse(str)\n        this.setState(obj)\n    }\n\n    inc = () => {\n        if (this.state.currentValue < this.state.maxValue) {\n            this.setState( // можно ли чем-то заменить Number\n                {currentValue: Number(this.state.currentValue) + this.state.stepCounter});\n\n        }\n    }\n\n    reset = () => {\n        this.setState({currentValue: this.state.minValue})\n    }\n\n    changeMaxValue = (e) => {\n        let newValue = Number(e.currentTarget.value);\n        if (newValue < 0 || newValue <= this.state.minValue || this.state.minValue < 0) {\n            this.setState({\n                maxValue: newValue,\n                currentValue: 'Incorrect value'\n            }, () => {\n                this.saveState()\n            })\n        } else {\n            this.setState({\n                maxValue: newValue,\n                //maxValue: localStorage.setItem('maxValue', newValue),\n                currentValue: 'Enter value and press \\'set\\''\n            }, () => {\n                this.saveState()\n            })\n        }\n    }\n\n    changeMinValue = (e) => {\n        let newMinValue = Number(e.currentTarget.value);\n        if (newMinValue < 0 || newMinValue >= this.state.maxValue) {\n            this.setState({\n                minValue: newMinValue,\n                currentValue: 'Incorrect value'\n            }, () => {\n                this.saveState()\n            })\n        } else {\n            this.setState({\n                minValue: newMinValue,\n                // minValue: localStorage.setItem('minValue', newMinValue),\n                currentValue: 'Enter value and press \\'set\\''\n            }, () => {\n                this.saveState()\n            })\n        }\n    }\n\n    set = () => {\n        this.setState({\n            currentValue: this.state.minValue\n        })\n    }\n\n    saveState = () => {\n        let ssd = JSON.stringify(this.state)\n        localStorage.setItem('counter', ssd)\n    }\n\n    render = () => {\n        let disabledSet = this.state.maxValue === this.state.minValue || this.state.minValue < 0 || this.state.maxValue < 0 || this.state.minValue > this.state.maxValue;\n        let styleCounter = this.state.currentValue === this.state.maxValue || this.state.currentValue === 'Incorrect value' ? 'red' : '';\n        let styleInput = this.state.currentValue === 'Incorrect value' ? 'red-border' : ''; //ok\n        let disabledInc = this.state.currentValue === this.state.maxValue || this.state.currentValue === 'Incorrect value' || this.state.currentValue === 'Enter value and press \\'set\\'';\n        let disabledRes = this.state.currentValue === this.state.minValue || this.state.currentValue === 'Incorrect value' || this.state.currentValue === 'Enter value and press \\'set\\'';\n\n        return (\n\n            <div className=\"App\">\n                <div className='settings'>\n                    <Settings\n                        styleInput={styleInput}\n                        disabledSet={disabledSet}\n                        onChangeMax={this.changeMaxValue}\n                        onChangeMin={this.changeMinValue}\n                        state={this.state}\n                        onClick={this.set}\n\n                    />\n                </div>\n                <div className='counter'>\n                    <Counter\n                        styleCounter={styleCounter}\n                        value={this.state.currentValue} //??\n                        disabledInc={disabledInc}\n                        disabledRes={disabledRes}\n                        disabledSet={disabledSet}\n                        onClick={this.inc}\n                        reset={this.reset}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}